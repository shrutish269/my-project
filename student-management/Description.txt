Practice 2 – MongoDB
Title:
Student Management System Using MongoDB and MVC Architecture

Objective:
To create a backend system for managing student records using Node.js, Express.js, and MongoDB.

To implement the MVC (Model-View-Controller) architecture for better code organization.

To understand how to perform CRUD operations (Create, Read, Update, Delete) in MongoDB using Mongoose.

Test Cases & Validations:
1. GET /students
Requirement: Fetch all students from the database.

Valid Input: Correct API endpoint /students.

Expected Output: Returns a JSON array of all students.

Example Output:

json
Copy code
[
  { "_id": "1", "name": "Alice Johnson", "age": 20, "course": "Computer Science" },
  { "_id": "2", "name": "Bob Smith", "age": 22, "course": "Mechanical Engineering" }
]
Invalid Input: Wrong endpoint /studentss.

Expected Output: 404 Not Found error.

2. GET /students/:id
Requirement: Fetch a student record by unique ID.

Valid Input: Correct existing student ID.

Expected Output: Returns the student object.

Example:

json
Copy code
{ "_id": "1", "name": "Alice Johnson", "age": 20, "course": "Computer Science" }
Invalid Input: Non-existing or malformed ID.

Expected Output: Error message → “Student not found”.

3. POST /students
Requirement: Add a new student to the database.

Valid Input: JSON body with all required fields.

json
Copy code
{ "name": "David Miller", "age": 21, "course": "Electrical Engineering" }
Expected Output:

json
Copy code
{ "_id": "4", "name": "David Miller", "age": 21, "course": "Electrical Engineering" }
Invalid Input: Missing fields or wrong data type (e.g., age: "abc").

Expected Output: Validation error (e.g., “Age must be a number”).

4. PUT /students/:id
Requirement: Update existing student details.

Valid Input: Existing ID + valid update body.

json
Copy code
{ "age": 23 }
Expected Output: Updated student object.

Invalid Input: Non-existing ID.

Expected Output: Error → “Student not found”.

5. DELETE /students/:id
Requirement: Delete a student by ID.

Valid Input: Existing ID.

Expected Output: “Student deleted successfully”.

Invalid Input: Wrong ID format or non-existing ID.

Expected Output: Error message.

CSS Styling Breakdown (if front-end form is added later)
This experiment is backend-focused, but if connected with a student registration form, the CSS can follow a similar style as your Experiment 1 with:

body for page background

.form-container for form styling

.form-group for labels and inputs

.btn-submit for submit button

Learning Outcomes:
Learnt how to connect Node.js application with MongoDB using Mongoose.

Understood MVC architecture and its benefits in separating concerns.

Implemented CRUD operations (Create, Read, Update, Delete) with RESTful APIs.

Tested API endpoints using Postman to verify valid and invalid inputs.
